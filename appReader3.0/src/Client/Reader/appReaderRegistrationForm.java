/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client.Reader;

import Common.UtenteReader;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import javax.swing.*;
import javax.swing.border.MatteBorder;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Lorenzo Gavazzeni
 */
public class appReaderRegistrationForm extends javax.swing.JFrame {

    /**
     * Creates new form appReaderRegistrationForm
     */
    private static final int TOTAL_FIELD = 7;

    private Reader reader;
    private UtenteReader reader_user;
    private boolean registration_success = false;
    private boolean need_classe_sezione = false;

    Thread SuccessThread = new Thread(new Runnable() {
        @Override
        public void run() {

            try {
                if (registration_success) {

                    Thread.sleep(3000);
                    appReaderLoginForm loginForm = new appReaderLoginForm();
                    appReaderRegistrationForm.this.setVisible(false);
                    loginForm.setVisible(true);

                } else {
                }

            } catch (InterruptedException ex) {
                Logger.getLogger(appReaderRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    });

    public appReaderRegistrationForm(Reader lib) {

        initComponents();
        initLabels();
        reader = lib;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Layer1 = new javax.swing.JPanel();
        Layer2 = new javax.swing.JPanel();
        nomeLabel = new javax.swing.JLabel();
        NomeTextField = new javax.swing.JTextField();
        cognomeLabel = new javax.swing.JLabel();
        CognomeTextField = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        EmailTextField = new javax.swing.JTextField();
        codicefiscaleLabel = new javax.swing.JLabel();
        CodicefiscaleTextField = new javax.swing.JTextField();
        telephoneLabel = new javax.swing.JLabel();
        TelephoneTextField = new javax.swing.JTextField();
        pswLabel = new javax.swing.JLabel();
        PasswordField = new javax.swing.JPasswordField();
        ErrorNomeLabel = new javax.swing.JLabel();
        ErrorCognomeLabel = new javax.swing.JLabel();
        ErrorCodiceFiscaleLabel = new javax.swing.JLabel();
        ErrorEmailLabel = new javax.swing.JLabel();
        ErrorNumTelLabel = new javax.swing.JLabel();
        ErrorPswLabel = new javax.swing.JLabel();
        SuccessLabel = new javax.swing.JLabel();
        InquadramentoLabel = new javax.swing.JLabel();
        ErrorInquadramentoLabel = new javax.swing.JLabel();
        InquadramentiComboBox = new javax.swing.JComboBox<>();
        ClasseSezioneField = new javax.swing.JTextField();
        RegistrationH1 = new javax.swing.JLabel();
        IndietroButton = new javax.swing.JButton();
        RegistrationButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reader Registration");
        setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_1);
        setPreferredSize(new java.awt.Dimension(790, 510));
        setResizable(false);
        setSize(new java.awt.Dimension(790, 510));

        Layer1.setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_1);

        Layer2.setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_2);
        Layer2.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 1, 1, 1, new java.awt.Color(0, 102, 153)));
        Layer2.setName("Layer2"); // NOI18N

        nomeLabel.setFont(Client.Reader.ReaderStyle.LABEL_FONT_2);
        nomeLabel.setText("Nome: ");

        NomeTextField.setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_2);
        NomeTextField.setFont(new java.awt.Font("Delius", 0, 18)); // NOI18N
        NomeTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        NomeTextField.setToolTipText("username");
        NomeTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        NomeTextField.setName("usernameTextField"); // NOI18N
        NomeTextField.setSelectionColor(new java.awt.Color(153, 153, 255));

        cognomeLabel.setFont(Client.Reader.ReaderStyle.LABEL_FONT_2);
        cognomeLabel.setText("Cognome: ");

        CognomeTextField.setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_2);
        CognomeTextField.setFont(new java.awt.Font("Delius", 0, 18)); // NOI18N
        CognomeTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        CognomeTextField.setToolTipText("username");
        CognomeTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        CognomeTextField.setName("usernameTextField"); // NOI18N
        CognomeTextField.setSelectionColor(new java.awt.Color(153, 153, 255));

        emailLabel.setFont(Client.Reader.ReaderStyle.LABEL_FONT_2);
        emailLabel.setText("Email: ");

        EmailTextField.setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_2);
        EmailTextField.setFont(new java.awt.Font("Delius", 0, 18)); // NOI18N
        EmailTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        EmailTextField.setToolTipText("username");
        EmailTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        EmailTextField.setName("usernameTextField"); // NOI18N
        EmailTextField.setSelectionColor(new java.awt.Color(153, 153, 255));

        codicefiscaleLabel.setFont(Client.Reader.ReaderStyle.LABEL_FONT_2);
        codicefiscaleLabel.setText("Codice fiscale: ");

        CodicefiscaleTextField.setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_2);
        CodicefiscaleTextField.setFont(new java.awt.Font("Delius", 0, 18)); // NOI18N
        CodicefiscaleTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        CodicefiscaleTextField.setToolTipText("username");
        CodicefiscaleTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        CodicefiscaleTextField.setName("usernameTextField"); // NOI18N
        CodicefiscaleTextField.setSelectionColor(new java.awt.Color(153, 153, 255));

        telephoneLabel.setFont(Client.Reader.ReaderStyle.LABEL_FONT_2);
        telephoneLabel.setText("Numero di Telefono: ");

        TelephoneTextField.setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_2);
        TelephoneTextField.setFont(new java.awt.Font("Delius", 0, 18)); // NOI18N
        TelephoneTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TelephoneTextField.setToolTipText("username");
        TelephoneTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        TelephoneTextField.setName("usernameTextField"); // NOI18N
        TelephoneTextField.setSelectionColor(new java.awt.Color(153, 153, 255));

        pswLabel.setFont(Client.Reader.ReaderStyle.LABEL_FONT_2);
        pswLabel.setText("Password: ");

        PasswordField.setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_2);
        PasswordField.setFont(new java.awt.Font("Delius", 0, 18)); // NOI18N
        PasswordField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        PasswordField.setToolTipText("password");
        PasswordField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        PasswordField.setEchoChar('â€¢');
        PasswordField.setName("passwordTextField"); // NOI18N
        PasswordField.setSelectionColor(new java.awt.Color(153, 153, 255));

        ErrorNomeLabel.setFont(Client.Reader.ReaderStyle.EXCEPTION_FONT);
        ErrorNomeLabel.setForeground(Client.Reader.ReaderStyle.EXCEPTION_COLOR);
        ErrorNomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ErrorNomeLabel.setLabelFor(NomeTextField);
        ErrorNomeLabel.setText("eccezione nome");
        ErrorNomeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        ErrorCognomeLabel.setFont(Client.Reader.ReaderStyle.EXCEPTION_FONT);
        ErrorCognomeLabel.setForeground(Client.Reader.ReaderStyle.EXCEPTION_COLOR);
        ErrorCognomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ErrorCognomeLabel.setLabelFor(CognomeTextField);
        ErrorCognomeLabel.setText("eccezione cognome");
        ErrorCognomeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        ErrorCodiceFiscaleLabel.setFont(Client.Reader.ReaderStyle.EXCEPTION_FONT);
        ErrorCodiceFiscaleLabel.setForeground(Client.Reader.ReaderStyle.EXCEPTION_COLOR);
        ErrorCodiceFiscaleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ErrorCodiceFiscaleLabel.setLabelFor(CodicefiscaleTextField);
        ErrorCodiceFiscaleLabel.setText("eccezione codiceFis");
        ErrorCodiceFiscaleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        ErrorEmailLabel.setFont(Client.Reader.ReaderStyle.EXCEPTION_FONT);
        ErrorEmailLabel.setForeground(Client.Reader.ReaderStyle.EXCEPTION_COLOR);
        ErrorEmailLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ErrorEmailLabel.setLabelFor(EmailTextField);
        ErrorEmailLabel.setText("eccezione email");
        ErrorEmailLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        ErrorNumTelLabel.setFont(Client.Reader.ReaderStyle.EXCEPTION_FONT);
        ErrorNumTelLabel.setForeground(Client.Reader.ReaderStyle.EXCEPTION_COLOR);
        ErrorNumTelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ErrorNumTelLabel.setLabelFor(TelephoneTextField);
        ErrorNumTelLabel.setText("eccezione numTel");
        ErrorNumTelLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        ErrorPswLabel.setFont(Client.Reader.ReaderStyle.EXCEPTION_FONT);
        ErrorPswLabel.setForeground(Client.Reader.ReaderStyle.EXCEPTION_COLOR);
        ErrorPswLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ErrorPswLabel.setLabelFor(PasswordField);
        ErrorPswLabel.setText("eccezione psw");
        ErrorPswLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        SuccessLabel.setFont(Client.Reader.ReaderStyle.SUCCESS_LABEL_FONT);
        SuccessLabel.setForeground(Client.Reader.ReaderStyle.SUCCESS_COLOR);
        SuccessLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SuccessLabel.setLabelFor(RegistrationButton);
        SuccessLabel.setText("successo");
        SuccessLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        InquadramentoLabel.setFont(Client.Reader.ReaderStyle.LABEL_FONT_2);
        InquadramentoLabel.setText("Inquadramento:");

        ErrorInquadramentoLabel.setFont(Client.Reader.ReaderStyle.EXCEPTION_FONT);
        ErrorInquadramentoLabel.setForeground(Client.Reader.ReaderStyle.EXCEPTION_COLOR);
        ErrorInquadramentoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ErrorInquadramentoLabel.setLabelFor(TelephoneTextField);
        ErrorInquadramentoLabel.setText("eccezione inquadr");
        ErrorInquadramentoLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        InquadramentiComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(UtenteReader.INQUADRAMENTI_READER_DEAFULT));

        ClasseSezioneField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClasseSezioneFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Layer2Layout = new javax.swing.GroupLayout(Layer2);
        Layer2.setLayout(Layer2Layout);
        Layer2Layout.setHorizontalGroup(
            Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Layer2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomeLabel)
                    .addComponent(NomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ErrorNomeLabel)
                    .addComponent(emailLabel)
                    .addComponent(ErrorEmailLabel)
                    .addComponent(EmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(PasswordField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cognomeLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CognomeTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ErrorCognomeLabel)
                    .addComponent(pswLabel)
                    .addComponent(ErrorPswLabel)
                    .addComponent(ErrorNumTelLabel)
                    .addComponent(telephoneLabel)
                    .addComponent(TelephoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addGroup(Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ErrorInquadramentoLabel)
                    .addComponent(InquadramentoLabel)
                    .addComponent(ErrorCodiceFiscaleLabel)
                    .addComponent(codicefiscaleLabel)
                    .addComponent(CodicefiscaleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Layer2Layout.createSequentialGroup()
                        .addComponent(InquadramentiComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ClasseSezioneField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Layer2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SuccessLabel)
                .addGap(356, 356, 356))
        );
        Layer2Layout.setVerticalGroup(
            Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Layer2Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Layer2Layout.createSequentialGroup()
                        .addGroup(Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(Layer2Layout.createSequentialGroup()
                                .addComponent(codicefiscaleLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CodicefiscaleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Layer2Layout.createSequentialGroup()
                                .addComponent(nomeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ErrorNomeLabel)
                            .addComponent(ErrorCodiceFiscaleLabel))
                        .addGap(18, 18, 18)
                        .addGroup(Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Layer2Layout.createSequentialGroup()
                                .addComponent(emailLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(EmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ErrorEmailLabel))
                            .addGroup(Layer2Layout.createSequentialGroup()
                                .addComponent(InquadramentoLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(Layer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(InquadramentiComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ClasseSezioneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ErrorInquadramentoLabel))))
                    .addGroup(Layer2Layout.createSequentialGroup()
                        .addComponent(cognomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CognomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ErrorCognomeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(telephoneLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TelephoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ErrorNumTelLabel)
                        .addGap(30, 30, 30)
                        .addComponent(pswLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ErrorPswLabel)))
                .addGap(23, 23, 23)
                .addComponent(SuccessLabel)
                .addContainerGap())
        );

        RegistrationH1.setFont(Client.Reader.ReaderStyle.BIG_TITLE_FONT);
        RegistrationH1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RegistrationH1.setText("Reader Registration");
        RegistrationH1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RegistrationH1.setName("RegistrationH1"); // NOI18N

        IndietroButton.setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_2);
        IndietroButton.setFont(Client.Reader.ReaderStyle.BUTTON_FONT);
        IndietroButton.setForeground(new java.awt.Color(51, 51, 51));
        IndietroButton.setText("Indietro");
        IndietroButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(102, 102, 102)));
        IndietroButton.setContentAreaFilled(false);
        IndietroButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        IndietroButton.setMargin(new java.awt.Insets(2, 7, 2, 7));
        IndietroButton.setOpaque(true);
        IndietroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndietroButtonActionPerformed(evt);
            }
        });

        RegistrationButton.setBackground(Client.Reader.ReaderStyle.BACKGROUD_DEFAULT_2);
        RegistrationButton.setFont(Client.Reader.ReaderStyle.BUTTON_FONT);
        RegistrationButton.setForeground(new java.awt.Color(51, 51, 51));
        RegistrationButton.setText("Registrati");
        RegistrationButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(102, 102, 102)));
        RegistrationButton.setContentAreaFilled(false);
        RegistrationButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RegistrationButton.setMargin(new java.awt.Insets(2, 7, 2, 7));
        RegistrationButton.setOpaque(true);
        RegistrationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Layer1Layout = new javax.swing.GroupLayout(Layer1);
        Layer1.setLayout(Layer1Layout);
        Layer1Layout.setHorizontalGroup(
            Layer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Layer2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(Layer1Layout.createSequentialGroup()
                .addGap(231, 231, 231)
                .addComponent(RegistrationH1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(Layer1Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(IndietroButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RegistrationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117))
        );
        Layer1Layout.setVerticalGroup(
            Layer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Layer1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RegistrationH1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Layer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Layer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IndietroButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RegistrationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Layer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Layer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initLabels() {
        
        ClasseSezioneField.setVisible(true);
        ClasseSezioneField.setEnabled(false);
        
        InquadramentiComboBox.addItemListener(SelectedStudentItemListener());
        
        ErrorNomeLabel.setVisible(false);
        ErrorCognomeLabel.setVisible(false);
        ErrorCodiceFiscaleLabel.setVisible(false);
        ErrorEmailLabel.setVisible(false);
        ErrorInquadramentoLabel.setVisible(false);
        ErrorNumTelLabel.setVisible(false);
        ErrorPswLabel.setVisible(false);

        SuccessLabel.setVisible(false);
    }

    private void RefreshGenericLabel(javax.swing.JLabel label_toUpadte, java.awt.Color color, String to_display) {
        try {
            Thread.sleep(400);
        } catch (InterruptedException ex) {
            Logger.getLogger(appReader.class.getName()).log(Level.SEVERE, null, ex);
        }

        new Thread(
                new Runnable() {

            public void run() {

                label_toUpadte.setForeground(color);
                label_toUpadte.setText(to_display);
                label_toUpadte.setVisible(true);

                label_toUpadte.getParent().revalidate();

            }
        }).start();

    }

    private boolean CheckAllField() throws RemoteException {
        int controller;
        int correct = 0;

        MatteBorder exceptionborder = new MatteBorder(0, 0, 1, 0, ReaderStyle.EXCEPTION_COLOR);

        controller = reader.checker.userChecker.checkAvaliableNomeCognome(NomeTextField.getText());
        if (controller != 0) {

            NomeTextField.setBorder(exceptionborder);

            if (controller == 1) {
                RefreshGenericLabel(ErrorNomeLabel, ErrorNomeLabel.getForeground(), "Ã¨ vuoto");
            }
            if (controller == 2) {
                RefreshGenericLabel(ErrorNomeLabel, ErrorNomeLabel.getForeground(), "limite caratteri superato");
            }
            if (controller == 3) {
                RefreshGenericLabel(ErrorNomeLabel, ErrorNomeLabel.getForeground(), "ammesse solo lettere");
            }
        } else {
            NomeTextField.setBorder(ReaderStyle.DEFAULT_MATTE_REGISTRATION);
            ErrorNomeLabel.setVisible(false);
            correct++;
        }

        controller = reader.checker.userChecker.checkAvaliableNomeCognome(CognomeTextField.getText());
        if (controller != 0) {
            CognomeTextField.setBorder(exceptionborder);

            if (controller == 1) {
                RefreshGenericLabel(ErrorCognomeLabel, ErrorCognomeLabel.getForeground(), "Ã¨ vuoto");
            }
            if (controller == 2) {
                RefreshGenericLabel(ErrorCognomeLabel, ErrorCognomeLabel.getForeground(), "limite caratteri superato");
            }
            if (controller == 3) {
                RefreshGenericLabel(ErrorCognomeLabel, ErrorCognomeLabel.getForeground(), "ammesse solo lettere");
            }
        } else {
            CognomeTextField.setBorder(ReaderStyle.DEFAULT_MATTE_REGISTRATION);
            ErrorCognomeLabel.setVisible(false);

            correct++;
        }

        controller = reader.checker.userChecker.checkCodiceFiscale(CodicefiscaleTextField.getText());
        if (controller != 0) {
            CodicefiscaleTextField.setBorder(exceptionborder);

            if (controller == 1) {
                RefreshGenericLabel(ErrorCodiceFiscaleLabel, ErrorCodiceFiscaleLabel.getForeground(), "Ã¨ vuoto");
            }
            if (controller == 2) {
                RefreshGenericLabel(ErrorCodiceFiscaleLabel, ErrorCodiceFiscaleLabel.getForeground(), "troppo corto, minimo: 4");
            }
            if (controller == 3) {
                RefreshGenericLabel(ErrorCodiceFiscaleLabel, ErrorCodiceFiscaleLabel.getForeground(), "troppo lungo, massimo: 5");
            }
        } else if (reader.CheckParametricExisting("USERID", CodicefiscaleTextField.getText(), reader.GetType())) {
            RefreshGenericLabel(ErrorCodiceFiscaleLabel, ErrorCodiceFiscaleLabel.getForeground(), "ERRORE: utente giÃ  esistente");
        } else {
            CodicefiscaleTextField.setBorder(ReaderStyle.DEFAULT_MATTE_REGISTRATION);
            ErrorCodiceFiscaleLabel.setVisible(false);
            correct++;
        }

        controller = reader.checker.userChecker.checkEmail(EmailTextField.getText());
        if (controller != 0) {
            EmailTextField.setBorder(exceptionborder);

            if (controller == 1) {
                RefreshGenericLabel(ErrorEmailLabel, ErrorEmailLabel.getForeground(), "Ã¨ vuoto");
            }
            if (controller == 2) {
                RefreshGenericLabel(ErrorEmailLabel, ErrorEmailLabel.getForeground(), "superata lunghezza max: 30");
            }
            if (controller == 3) {
                RefreshGenericLabel(ErrorEmailLabel, ErrorEmailLabel.getForeground(), "errore format, manca: @");
            }
            if (controller == 4) {
                RefreshGenericLabel(ErrorEmailLabel, ErrorEmailLabel.getForeground(), "troppi simboli '@'");
            }
            if (controller == 5) {
                RefreshGenericLabel(ErrorEmailLabel, ErrorEmailLabel.getForeground(), "nessun carattere prima di '@'");
            }
            if (controller == 6) {
                RefreshGenericLabel(ErrorEmailLabel, ErrorEmailLabel.getForeground(), "errore formato, manca: '.'");
            }
        } else {
            EmailTextField.setBorder(ReaderStyle.DEFAULT_MATTE_REGISTRATION);
            ErrorEmailLabel.setVisible(false);
            correct++;
        }

        if(need_classe_sezione){
        controller = reader.checker.userChecker.checkInquadramentoClasse(ClasseSezioneField.getText());
        }
        else controller = 0;
        
        if (controller != 0) {
            if (controller == 1) {
                RefreshGenericLabel(ErrorInquadramentoLabel, ErrorInquadramentoLabel.getForeground(), "Ã¨ vuoto");
            }
            if (controller == 2) {
                RefreshGenericLabel(ErrorInquadramentoLabel, ErrorInquadramentoLabel.getForeground(), "deve essere: <num><lettera>");
            }

        } else {
            ClasseSezioneField.setBorder(ReaderStyle.DEFAULT_MATTE_REGISTRATION);
            ErrorInquadramentoLabel.setVisible(false);
            correct++;
        }

        controller = reader.checker.userChecker.checkNumero(TelephoneTextField.getText());
        if (controller != 0) {
            TelephoneTextField.setBorder(exceptionborder);

            if (controller == 1) {
                RefreshGenericLabel(ErrorNumTelLabel, ErrorNumTelLabel.getForeground(), "Ã¨ vuoto");
            }
            if (controller == 2) {
                RefreshGenericLabel(ErrorNumTelLabel, ErrorNumTelLabel.getForeground(), "lunghezza massima superata: 15");
            }
            if (controller == 3) {
                RefreshGenericLabel(ErrorNumTelLabel, ErrorNumTelLabel.getForeground(), "deve contenere solo numeri");
            }

        } else {
            TelephoneTextField.setBorder(ReaderStyle.DEFAULT_MATTE_REGISTRATION);
            ErrorNumTelLabel.setVisible(false);
            correct++;
        }

        controller = reader.checker.userChecker.checkPassword(PasswordField.getPassword());

        if (controller != 0) {
            PasswordField.setBorder(exceptionborder);

            if (controller == 1) {
                RefreshGenericLabel(ErrorPswLabel, ErrorPswLabel.getForeground(), "Ã¨ vuoto");
            }
            if (controller == 2) {
                RefreshGenericLabel(ErrorPswLabel, ErrorPswLabel.getForeground(), "lunghezza minima: 6");
            }
            if (controller == 3) {
                RefreshGenericLabel(ErrorPswLabel, ErrorPswLabel.getForeground(), "serve almeno un numero");
            }
            if (controller == 4) {
                RefreshGenericLabel(ErrorPswLabel, ErrorPswLabel.getForeground(), "serve almeno una maiuscola");
            }
            if (controller == 5) {
                RefreshGenericLabel(ErrorPswLabel, ErrorPswLabel.getForeground(), "lunghezza massima superata: 15");
            }
        } else {
            PasswordField.setBorder(ReaderStyle.DEFAULT_MATTE_REGISTRATION);
            ErrorPswLabel.setVisible(false);
            correct++;
        }

        return correct == TOTAL_FIELD;

    }

    private void BuildUser() throws RemoteException {
        
         String tmp_inq;
                    
        if(need_classe_sezione) tmp_inq = InquadramentiComboBox.getSelectedItem().toString() + "-" + ClasseSezioneField.getText();
        else tmp_inq = InquadramentiComboBox.getSelectedItem().toString();
        
        reader_user = new UtenteReader(
                NomeTextField.getText(),
                CognomeTextField.getText(),
                CodicefiscaleTextField.getText(),
                EmailTextField.getText(),
                tmp_inq,
                TelephoneTextField.getText(),
                PasswordField.getPassword(),
                reader.GenerateUserCode(CodicefiscaleTextField.getText())
        );

        reader.SetUtente(reader_user);

    }

    ItemListener SelectedStudentItemListener()
    {
        ItemListener return_Listener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                
                Object selected = InquadramentiComboBox.getSelectedItem();
                
                SwingUtilities.invokeLater(()->{
                    
                if( selected.toString().equals("Studente"))
                {
                    ClasseSezioneField.setEnabled(true);
                    need_classe_sezione = true;
                    
                }
                else{
                    ClasseSezioneField.setEnabled(false);
                    need_classe_sezione = false;
                    ClasseSezioneField.setText("");
                }
                
                });
            }
        };
        
        return return_Listener;            
    }
    
    private void IndietroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndietroButtonActionPerformed

        appReaderLoginForm loginForm = new appReaderLoginForm();
        this.setVisible(false);
        loginForm.setVisible(true);

    }//GEN-LAST:event_IndietroButtonActionPerformed

    private void SuccessLabelChange(String message, java.awt.Color color) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {

                SuccessLabel.setVisible(false);

                SuccessLabel.setText(message);
                SuccessLabel.setForeground(color);

                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(appReaderRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
                }

                SuccessLabel.setVisible(true);

            }
        });

    }

    private void RegistrationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrationButtonActionPerformed


        try {
            if (CheckAllField()) {
                try {

                    BuildUser();

                    if (reader.InserUser()) {

                        reader.SendConfirmationCode(reader.GetParamUser().GetUserID(), reader.GetDefaultType());

                        SuccessLabelChange("Profilo creato, controlla le mail", ReaderStyle.SUCCESS_COLOR);
                        reader.SendCommunicationServer("[READER-" + reader.GetID() + "] utente registrato, profilo creato");

                        registration_success = true;

                        SuccessThread.start();
                    } else {

                        SuccessLabelChange("Errore nella serializzazione", ReaderStyle.EXCEPTION_COLOR);

                    }

                } catch (RemoteException ex) {
                    Logger.getLogger(appReaderRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(new JFrame(),"ERRORE FATALE, SERVER OFFLINE");
                    System.exit(0);
                }

            } else {
            }
        } catch (RemoteException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(new JFrame(),"ERRORE FATALE, SERVER OFFLINE");
            System.exit(0);
        }


    }//GEN-LAST:event_RegistrationButtonActionPerformed

    private void ClasseSezioneFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClasseSezioneFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClasseSezioneFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(appReaderRegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(appReaderRegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(appReaderRegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(appReaderRegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {

                    new appReaderRegistrationForm(new Reader()).setVisible(true);

                } catch (RemoteException ex) {
                    Logger.getLogger(appReaderRegistrationForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ClasseSezioneField;
    private javax.swing.JTextField CodicefiscaleTextField;
    private javax.swing.JTextField CognomeTextField;
    private javax.swing.JTextField EmailTextField;
    private javax.swing.JLabel ErrorCodiceFiscaleLabel;
    private javax.swing.JLabel ErrorCognomeLabel;
    private javax.swing.JLabel ErrorEmailLabel;
    private javax.swing.JLabel ErrorInquadramentoLabel;
    private javax.swing.JLabel ErrorNomeLabel;
    private javax.swing.JLabel ErrorNumTelLabel;
    private javax.swing.JLabel ErrorPswLabel;
    private javax.swing.JButton IndietroButton;
    private javax.swing.JComboBox<String> InquadramentiComboBox;
    private javax.swing.JLabel InquadramentoLabel;
    private javax.swing.JPanel Layer1;
    private javax.swing.JPanel Layer2;
    private javax.swing.JTextField NomeTextField;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JButton RegistrationButton;
    private javax.swing.JLabel RegistrationH1;
    private javax.swing.JLabel SuccessLabel;
    private javax.swing.JTextField TelephoneTextField;
    private javax.swing.JLabel codicefiscaleLabel;
    private javax.swing.JLabel cognomeLabel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel nomeLabel;
    private javax.swing.JLabel pswLabel;
    private javax.swing.JLabel telephoneLabel;
    // End of variables declaration//GEN-END:variables
}
